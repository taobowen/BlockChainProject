/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SubscriptionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowedTokens"
      | "canAccess"
      | "cancel"
      | "checkForReminder"
      | "createPlan"
      | "gracePeriod"
      | "isActive"
      | "nextPlanId"
      | "owner"
      | "pass"
      | "pause"
      | "paused"
      | "plans"
      | "reminderSent"
      | "reminderWindow"
      | "renew"
      | "renounceOwnership"
      | "setAllowedToken"
      | "setGracePeriod"
      | "setPlanActive"
      | "setReminderWindow"
      | "subscribe"
      | "tokenPlan"
      | "transferOwnership"
      | "unpause"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllowedTokenSet"
      | "Cancellation"
      | "OwnershipTransferred"
      | "Paused"
      | "PlanActiveSet"
      | "PlanCreated"
      | "RenewalReminder"
      | "Renewed"
      | "Subscribed"
      | "Unpaused"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canAccess",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkForReminder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPlan",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextPlanId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pass", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "plans", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "reminderSent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reminderWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renew",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedToken",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGracePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlanActive",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReminderWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canAccess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkForReminder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPlan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextPlanId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pass", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reminderSent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reminderWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlanActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReminderWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenPlan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AllowedTokenSetEvent {
  export type InputTuple = [token: AddressLike, allowed: boolean];
  export type OutputTuple = [token: string, allowed: boolean];
  export interface OutputObject {
    token: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancellationEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenId: BigNumberish,
    when: BigNumberish
  ];
  export type OutputTuple = [user: string, tokenId: bigint, when: bigint];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
    when: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlanActiveSetEvent {
  export type InputTuple = [planId: BigNumberish, active: boolean];
  export type OutputTuple = [planId: bigint, active: boolean];
  export interface OutputObject {
    planId: bigint;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlanCreatedEvent {
  export type InputTuple = [
    planId: BigNumberish,
    price: BigNumberish,
    duration: BigNumberish,
    token: AddressLike
  ];
  export type OutputTuple = [
    planId: bigint,
    price: bigint,
    duration: bigint,
    token: string
  ];
  export interface OutputObject {
    planId: bigint;
    price: bigint;
    duration: bigint;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RenewalReminderEvent {
  export type InputTuple = [tokenId: BigNumberish, at: BigNumberish];
  export type OutputTuple = [tokenId: bigint, at: bigint];
  export interface OutputObject {
    tokenId: bigint;
    at: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RenewedEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenId: BigNumberish,
    planId: BigNumberish,
    newExpiresAt: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    tokenId: bigint,
    planId: bigint,
    newExpiresAt: bigint
  ];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
    planId: bigint;
    newExpiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscribedEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenId: BigNumberish,
    planId: BigNumberish,
    expiresAt: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    tokenId: bigint,
    planId: bigint,
    expiresAt: bigint
  ];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
    planId: bigint;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SubscriptionManager extends BaseContract {
  connect(runner?: ContractRunner | null): SubscriptionManager;
  waitForDeployment(): Promise<this>;

  interface: SubscriptionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowedTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  canAccess: TypedContractMethod<
    [user: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  cancel: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  checkForReminder: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createPlan: TypedContractMethod<
    [price: BigNumberish, duration: BigNumberish, token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  gracePeriod: TypedContractMethod<[], [bigint], "view">;

  isActive: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  nextPlanId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pass: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  plans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, boolean] & {
        price: bigint;
        duration: bigint;
        paymentToken: string;
        active: boolean;
      }
    ],
    "view"
  >;

  reminderSent: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  reminderWindow: TypedContractMethod<[], [bigint], "view">;

  renew: TypedContractMethod<
    [tokenId: BigNumberish, planId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAllowedToken: TypedContractMethod<
    [token: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  setGracePeriod: TypedContractMethod<
    [newGrace: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlanActive: TypedContractMethod<
    [planId: BigNumberish, active: boolean],
    [void],
    "nonpayable"
  >;

  setReminderWindow: TypedContractMethod<
    [newWindow: BigNumberish],
    [void],
    "nonpayable"
  >;

  subscribe: TypedContractMethod<
    [planId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  tokenPlan: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdraw: TypedContractMethod<
    [erc20: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "canAccess"
  ): TypedContractMethod<
    [user: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkForReminder"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createPlan"
  ): TypedContractMethod<
    [price: BigNumberish, duration: BigNumberish, token: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gracePeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isActive"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextPlanId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pass"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "plans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, boolean] & {
        price: bigint;
        duration: bigint;
        paymentToken: string;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "reminderSent"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "reminderWindow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renew"
  ): TypedContractMethod<
    [tokenId: BigNumberish, planId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAllowedToken"
  ): TypedContractMethod<
    [token: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGracePeriod"
  ): TypedContractMethod<[newGrace: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlanActive"
  ): TypedContractMethod<
    [planId: BigNumberish, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReminderWindow"
  ): TypedContractMethod<[newWindow: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<[planId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenPlan"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [erc20: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AllowedTokenSet"
  ): TypedContractEvent<
    AllowedTokenSetEvent.InputTuple,
    AllowedTokenSetEvent.OutputTuple,
    AllowedTokenSetEvent.OutputObject
  >;
  getEvent(
    key: "Cancellation"
  ): TypedContractEvent<
    CancellationEvent.InputTuple,
    CancellationEvent.OutputTuple,
    CancellationEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PlanActiveSet"
  ): TypedContractEvent<
    PlanActiveSetEvent.InputTuple,
    PlanActiveSetEvent.OutputTuple,
    PlanActiveSetEvent.OutputObject
  >;
  getEvent(
    key: "PlanCreated"
  ): TypedContractEvent<
    PlanCreatedEvent.InputTuple,
    PlanCreatedEvent.OutputTuple,
    PlanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RenewalReminder"
  ): TypedContractEvent<
    RenewalReminderEvent.InputTuple,
    RenewalReminderEvent.OutputTuple,
    RenewalReminderEvent.OutputObject
  >;
  getEvent(
    key: "Renewed"
  ): TypedContractEvent<
    RenewedEvent.InputTuple,
    RenewedEvent.OutputTuple,
    RenewedEvent.OutputObject
  >;
  getEvent(
    key: "Subscribed"
  ): TypedContractEvent<
    SubscribedEvent.InputTuple,
    SubscribedEvent.OutputTuple,
    SubscribedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "AllowedTokenSet(address,bool)": TypedContractEvent<
      AllowedTokenSetEvent.InputTuple,
      AllowedTokenSetEvent.OutputTuple,
      AllowedTokenSetEvent.OutputObject
    >;
    AllowedTokenSet: TypedContractEvent<
      AllowedTokenSetEvent.InputTuple,
      AllowedTokenSetEvent.OutputTuple,
      AllowedTokenSetEvent.OutputObject
    >;

    "Cancellation(address,uint256,uint256)": TypedContractEvent<
      CancellationEvent.InputTuple,
      CancellationEvent.OutputTuple,
      CancellationEvent.OutputObject
    >;
    Cancellation: TypedContractEvent<
      CancellationEvent.InputTuple,
      CancellationEvent.OutputTuple,
      CancellationEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PlanActiveSet(uint256,bool)": TypedContractEvent<
      PlanActiveSetEvent.InputTuple,
      PlanActiveSetEvent.OutputTuple,
      PlanActiveSetEvent.OutputObject
    >;
    PlanActiveSet: TypedContractEvent<
      PlanActiveSetEvent.InputTuple,
      PlanActiveSetEvent.OutputTuple,
      PlanActiveSetEvent.OutputObject
    >;

    "PlanCreated(uint256,uint256,uint32,address)": TypedContractEvent<
      PlanCreatedEvent.InputTuple,
      PlanCreatedEvent.OutputTuple,
      PlanCreatedEvent.OutputObject
    >;
    PlanCreated: TypedContractEvent<
      PlanCreatedEvent.InputTuple,
      PlanCreatedEvent.OutputTuple,
      PlanCreatedEvent.OutputObject
    >;

    "RenewalReminder(uint256,uint256)": TypedContractEvent<
      RenewalReminderEvent.InputTuple,
      RenewalReminderEvent.OutputTuple,
      RenewalReminderEvent.OutputObject
    >;
    RenewalReminder: TypedContractEvent<
      RenewalReminderEvent.InputTuple,
      RenewalReminderEvent.OutputTuple,
      RenewalReminderEvent.OutputObject
    >;

    "Renewed(address,uint256,uint256,uint256)": TypedContractEvent<
      RenewedEvent.InputTuple,
      RenewedEvent.OutputTuple,
      RenewedEvent.OutputObject
    >;
    Renewed: TypedContractEvent<
      RenewedEvent.InputTuple,
      RenewedEvent.OutputTuple,
      RenewedEvent.OutputObject
    >;

    "Subscribed(address,uint256,uint256,uint256)": TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;
    Subscribed: TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdrawal(address,address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
